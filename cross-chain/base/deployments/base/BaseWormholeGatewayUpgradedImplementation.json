{
  "address": "0x40fa0a360818b04b9975680746dC0B7092105A0c",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "gateway",
          "type": "bytes32"
        }
      ],
      "name": "GatewayAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintingLimit",
          "type": "uint256"
        }
      ],
      "name": "MintingLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WormholeTbtcDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WormholeTbtcReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "recipientChain",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "gateway",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "recipient",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "arbiterFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "nonce",
          "type": "uint32"
        }
      ],
      "name": "WormholeTbtcSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "contract IWormholeTokenBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_address",
          "type": "bytes32"
        }
      ],
      "name": "fromWormholeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "gateways",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IWormholeTokenBridge",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_bridgeToken",
          "type": "address"
        },
        {
          "internalType": "contract L2TBTC",
          "name": "_tbtc",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encodedVm",
          "type": "bytes"
        }
      ],
      "name": "receiveTbtc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "recipientChain",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "recipient",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "arbiterFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "nonce",
          "type": "uint32"
        }
      ],
      "name": "sendTbtc",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "recipientNativeChain",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "recipient",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "nonce",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "sendTbtcWithPayloadToNativeChain",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tbtc",
      "outputs": [
        {
          "internalType": "contract L2TBTC",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "toWormholeAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "gateway",
          "type": "bytes32"
        }
      ],
      "name": "updateGatewayAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintingLimit",
          "type": "uint256"
        }
      ],
      "name": "updateMintingLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3393bbc9c47ee3c38b2645170cae682812343fd14835a4b48a826050b46b6b75",
  "receipt": {
    "to": null,
    "from": "0x15424dC94D4da488DB0d0e0B7aAdB86835813a63",
    "contractAddress": "0x40fa0a360818b04b9975680746dC0B7092105A0c",
    "transactionIndex": 108,
    "gasUsed": "1967401",
    "logsBloom": "0x
    "blockHash": "0xa2c2958a718c274894f00bdd2b96ab1965ada1a116e9f4194b930bfa123357d2",
    "transactionHash": "0x3393bbc9c47ee3c38b2645170cae682812343fd14835a4b48a826050b46b6b75",
    "logs": [
      {
        "transactionIndex": 108,
        "blockNumber": 34646284,
        "transactionHash": "0x3393bbc9c47ee3c38b2645170cae682812343fd14835a4b48a826050b46b6b75",
        "address": "0x40fa0a360818b04b9975680746dC0B7092105A0c",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 370,
        "blockHash": "0xa2c2958a718c274894f00bdd2b96ab1965ada1a116e9f4194b930bfa123357d2"
      }
    ],
    "blockNumber": 34646284,
    "cumulativeGasUsed": "21584497",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a24e666157626f92b8e363a10b968cd1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"gateway\",\"type\":\"bytes32\"}],\"name\":\"GatewayAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintingLimit\",\"type\":\"uint256\"}],\"name\":\"MintingLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WormholeTbtcDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WormholeTbtcReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"recipientChain\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"gateway\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arbiterFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"WormholeTbtcSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract IWormholeTokenBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_address\",\"type\":\"bytes32\"}],\"name\":\"fromWormholeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"gateways\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWormholeTokenBridge\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_bridgeToken\",\"type\":\"address\"},{\"internalType\":\"contract L2TBTC\",\"name\":\"_tbtc\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedVm\",\"type\":\"bytes\"}],\"name\":\"receiveTbtc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"recipientChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"arbiterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"sendTbtc\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"recipientNativeChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sendTbtcWithPayloadToNativeChain\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tbtc\",\"outputs\":[{\"internalType\":\"contract L2TBTC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"toWormholeAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"gateway\",\"type\":\"bytes32\"}],\"name\":\"updateGatewayAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingLimit\",\"type\":\"uint256\"}],\"name\":\"updateMintingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is intended solely for testing purposes. As it currently      stands in the implementation of L2WormholeGateway.sol, there are no      reserved storage gap slots available, thereby limiting the upgradability      to a child contract only.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"fromWormholeAddress(bytes32)\":{\"params\":{\"_address\":\"The address to convert.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveTbtc(bytes)\":{\"details\":\"Requirements:      - The receiver of Wormhole tBTC should be the L2WormholeGateway        contract.      - The receiver of the canonical tBTC should be abi-encoded in the        payload.      - The receiver of the canonical tBTC must not be the zero address.      The Wormhole Token Bridge contract has protection against redeeming      the same VAA again. When a Token Bridge VAA is redeemed, its      message body hash is stored in a map. This map is used to check      whether the hash has already been set in this map. For this reason,      this function does not have to be nonReentrant in theory. However,      to make this function non-dependent on Wormhole Bridge implementation,      we are making it nonReentrant anyway.\",\"params\":{\"encodedVm\":\"A byte array containing a Wormhole VAA signed by the        guardians.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendTbtc(uint256,uint16,bytes32,uint256,uint32)\":{\"details\":\"Requirements:      - The sender must have at least `amount` of the canonical tBTC and        it has to be approved for L2WormholeGateway.      - The L2WormholeGateway must have at least `amount` of the wormhole        tBTC.      - The recipient must not be 0x0.      - The amount to transfer must not be 0,      - The amount to transfer must be >= 10^10 (1e18 precision).      Depending if Wormhole tBTC gateway is registered on the target      chain, this function uses transfer or transfer with payload over      the Wormhole bridge.\",\"params\":{\"amount\":\"The amount of tBTC to be sent.\",\"arbiterFee\":\"The Wormhole arbiter fee. Ignored if sending                   tBTC to chain with Wormhole tBTC gateway.\",\"nonce\":\"The Wormhole nonce used to batch messages together.\",\"recipient\":\"The address of the recipient in the Wormhole format.\",\"recipientChain\":\"The Wormhole recipient chain ID.\"},\"returns\":{\"_0\":\"The Wormhole sequence number.\"}},\"sendTbtcWithPayloadToNativeChain(uint256,uint16,bytes32,uint32,bytes)\":{\"details\":\"Requirements:      - The native chain doesn't have a Wormhole tBTC gateway, so the token        minted by Wormhole should be considered canonical.      - The sender must have at least `amount` of the canonical tBTC and        it has to be approved for L2WormholeGateway.      - The L2WormholeGateway must have at least `amount` of the wormhole        tBTC.      - The recipient must not be 0x0.      - The amount to transfer must not be 0,      - The amount to transfer must be >= 10^10 (1e18 precision).      This function uses `transferTokensWithPayload` to send tBTC directly      to the `recipient` contract address on the recipient chain. The `arbiterFee` is      not applicable and implicitly 0.\",\"params\":{\"amount\":\"The amount of tBTC to be sent.\",\"nonce\":\"The Wormhole nonce used to batch messages together.\",\"payload\":\"The arbitrary data to be passed to and processed by the `recipient`                contract on the recipient chain.\",\"recipient\":\"The Wormhole-formatted address of the target contract on the recipient chain                  that will receive the tokens and process the payload.\",\"recipientNativeChain\":\"The Wormhole chain ID of the recipient chain.\"},\"returns\":{\"_0\":\"The Wormhole sequence number.\"}},\"toWormholeAddress(address)\":{\"params\":{\"_address\":\"The address to convert.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateGatewayAddress(uint16,bytes32)\":{\"details\":\"Use toWormholeAddress function to convert between Ethereum and      Wormhole address formats.\",\"params\":{\"chainId\":\"Wormhole ID of the chain.\",\"gateway\":\"Address of tBTC gateway on the given chain in a Wormhole                format.\"}},\"updateMintingLimit(uint256)\":{\"params\":{\"_mintingLimit\":\"The new minting limit.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bridge()\":{\"notice\":\"Reference to the Wormhole Token Bridge contract.\"},\"bridgeToken()\":{\"notice\":\"Wormhole tBTC token representation.\"},\"fromWormholeAddress(bytes32)\":{\"notice\":\"Converts Wormhole address into Ethereum format.\"},\"gateways(uint16)\":{\"notice\":\"Maps Wormhole chain ID to the Wormhole tBTC gateway address on         that chain. For example, this chain's ID should be mapped to         this contract's address. If there is no Wormhole tBTC gateway         address on the given chain, there is no entry in this mapping.         The mapping holds addresses in a Wormhole-specific format, where         Ethereum address is left-padded with zeros.\"},\"mintedAmount()\":{\"notice\":\"The amount of tBTC minted by this contract. tBTC burned by this         contract decreases this amount.\"},\"mintingLimit()\":{\"notice\":\"Minting limit for this gateway. Useful for early days of testing         the system. The gateway can not mint more canonical tBTC than         this limit.\"},\"receiveTbtc(bytes)\":{\"notice\":\"This function is called when the user redeems their token on L2.         The contract receives Wormhole tBTC representation and mints the         canonical tBTC for the user.         If the tBTC minting limit has been reached by this contract,         instead of minting tBTC the receiver address receives Wormhole         tBTC representation.\"},\"sendTbtc(uint256,uint16,bytes32,uint256,uint32)\":{\"notice\":\"This function is called when the user sends their token from L2.         The contract burns the canonical tBTC from the user and sends         wormhole tBTC representation over the bridge.         Keep in mind that when multiple bridges receive a minting         authority on the canonical tBTC, this function may not be able         to send all amounts of tBTC through the Wormhole bridge. The         capability of Wormhole Bridge to send tBTC from the chain is         limited to the amount of tBTC bridged through Wormhole to that         chain.\"},\"sendTbtcWithPayloadToNativeChain(uint256,uint16,bytes32,uint32,bytes)\":{\"notice\":\"This function is called when the user sends their token from L2.         The contract burns the canonical tBTC from the user and sends         wormhole tBTC representation over the bridge.         Keep in mind that when multiple bridges receive a minting         authority on the canonical tBTC, this function may not be able         to send all amounts of tBTC through the Wormhole bridge. The         capability of Wormhole Bridge to send tBTC from the chain is         limited to the amount of tBTC bridged through Wormhole to that         chain.\"},\"tbtc()\":{\"notice\":\"Canonical tBTC token.\"},\"toWormholeAddress(address)\":{\"notice\":\"Converts Ethereum address into Wormhole format.\"},\"updateGatewayAddress(uint16,bytes32)\":{\"notice\":\"Lets the governance to update the tBTC gateway address on the         chain with the given Wormhole ID.\"},\"updateMintingLimit(uint256)\":{\"notice\":\"Lets the governance to update the tBTC minting limit for this         contract.\"}},\"notice\":\"Wormhole gateway for L2 Base - upgraded version.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wormhole/BaseWormholeGatewayUpgraded.sol\":\"BaseWormholeGatewayUpgraded\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@keep-network/tbtc-v2/contracts/l2/L2TBTC.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\n/// @title L2TBTC\\n/// @notice Canonical L2/sidechain token implementation. tBTC token is minted on\\n///         L1 and locked there to be moved to L2/sidechain. By deploying\\n///         a canonical token on each L2/sidechain, we can ensure the supply of\\n///         tBTC remains sacrosanct, while enabling quick, interoperable\\n///         cross-chain bridges and localizing ecosystem risk.\\n///\\n///         This contract is flexible enough to:\\n///         - Delegate minting authority to a native bridge on the chain, if\\n///           present.\\n///         - Delegate minting authority to a short list of ecosystem bridges.\\n///         - Have mints and burns paused by any one of n guardians, allowing\\n///           avoidance of contagion in case of a chain- or bridge-specific\\n///           incident.\\n///         - Be governed and upgradeable.\\n///\\n///         The token is burnable by the token holder and supports EIP2612\\n///         permits. Token holder can authorize a transfer of their token with\\n///         a signature conforming EIP712 standard instead of an on-chain\\n///         transaction from their address. Anyone can submit this signature on\\n///         the user's behalf by calling the permit function, paying gas fees,\\n///         and possibly performing other actions in the same transaction.\\n///         The governance can recover ERC20 and ERC721 tokens sent mistakenly\\n///         to L2TBTC token contract.\\ncontract L2TBTC is\\n    ERC20Upgradeable,\\n    ERC20BurnableUpgradeable,\\n    ERC20PermitUpgradeable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @notice Indicates if the given address is a minter. Only minters can\\n    ///         mint the token.\\n    mapping(address => bool) public isMinter;\\n\\n    /// @notice List of all minters.\\n    address[] public minters;\\n\\n    /// @notice Indicates if the given address is a guardian. Only guardians can\\n    ///         pause token mints and burns.\\n    mapping(address => bool) public isGuardian;\\n\\n    /// @notice List of all guardians.\\n    address[] public guardians;\\n\\n    event MinterAdded(address indexed minter);\\n    event MinterRemoved(address indexed minter);\\n\\n    event GuardianAdded(address indexed guardian);\\n    event GuardianRemoved(address indexed guardian);\\n\\n    modifier onlyMinter() {\\n        require(isMinter[msg.sender], \\\"Caller is not a minter\\\");\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(isGuardian[msg.sender], \\\"Caller is not a guardian\\\");\\n        _;\\n    }\\n\\n    /// @notice Initializes the token contract.\\n    /// @param _name The name of the token.\\n    /// @param _symbol The symbol of the token, usually a shorter version of the\\n    ///        name.\\n    function initialize(string memory _name, string memory _symbol)\\n        external\\n        initializer\\n    {\\n        // OpenZeppelin upgradeable contracts documentation says:\\n        //\\n        // \\\"Use with multiple inheritance requires special care. Initializer\\n        // functions are not linearized by the compiler like constructors.\\n        // Because of this, each __{ContractName}_init function embeds the\\n        // linearized calls to all parent initializers. As a consequence,\\n        // calling two of these init functions can potentially initialize the\\n        // same contract twice.\\\"\\n        //\\n        // Note that ERC20 extensions do not linearize calls to ERC20Upgradeable\\n        // initializer so we call all extension initializers individually. At\\n        // the same time, ERC20PermitUpgradeable does linearize the call to\\n        // EIP712Upgradeable so we are not using the unchained initializer\\n        // versions.\\n        __ERC20_init(_name, _symbol);\\n        __ERC20Burnable_init();\\n        __ERC20Permit_init(_name);\\n        __Ownable_init();\\n        __Pausable_init();\\n    }\\n\\n    /// @notice Adds the address to the minters list.\\n    /// @dev Requirements:\\n    ///      - The caller must be the contract owner.\\n    ///      - `minter` must not be a minter address already.\\n    /// @param minter The address to be added as a minter.\\n    function addMinter(address minter) external onlyOwner {\\n        require(!isMinter[minter], \\\"This address is already a minter\\\");\\n        isMinter[minter] = true;\\n        minters.push(minter);\\n        emit MinterAdded(minter);\\n    }\\n\\n    /// @notice Removes the address from the minters list.\\n    /// @dev Requirements:\\n    ///      - The caller must be the contract owner.\\n    ///      - `minter` must be a minter address.\\n    /// @param minter The address to be removed from the minters list.\\n    function removeMinter(address minter) external onlyOwner {\\n        require(isMinter[minter], \\\"This address is not a minter\\\");\\n        delete isMinter[minter];\\n\\n        // We do not expect too many minters so a simple loop is safe.\\n        for (uint256 i = 0; i < minters.length; i++) {\\n            if (minters[i] == minter) {\\n                minters[i] = minters[minters.length - 1];\\n                // slither-disable-next-line costly-loop\\n                minters.pop();\\n                break;\\n            }\\n        }\\n\\n        emit MinterRemoved(minter);\\n    }\\n\\n    /// @notice Adds the address to the guardians list.\\n    /// @dev Requirements:\\n    ///      - The caller must be the contract owner.\\n    ///      - `guardian` must not be a guardian address already.\\n    /// @param guardian The address to be added as a guardian.\\n    function addGuardian(address guardian) external onlyOwner {\\n        require(!isGuardian[guardian], \\\"This address is already a guardian\\\");\\n        isGuardian[guardian] = true;\\n        guardians.push(guardian);\\n        emit GuardianAdded(guardian);\\n    }\\n\\n    /// @notice Removes the address from the guardians list.\\n    /// @dev Requirements:\\n    ///      - The caller must be the contract owner.\\n    ///      - `guardian` must be a guardian address.\\n    /// @param guardian The address to be removed from the guardians list.\\n    function removeGuardian(address guardian) external onlyOwner {\\n        require(isGuardian[guardian], \\\"This address is not a guardian\\\");\\n        delete isGuardian[guardian];\\n\\n        // We do not expect too many guardians so a simple loop is safe.\\n        for (uint256 i = 0; i < guardians.length; i++) {\\n            if (guardians[i] == guardian) {\\n                guardians[i] = guardians[guardians.length - 1];\\n                // slither-disable-next-line costly-loop\\n                guardians.pop();\\n                break;\\n            }\\n        }\\n\\n        emit GuardianRemoved(guardian);\\n    }\\n\\n    /// @notice Allows the governance of the token contract to recover any ERC20\\n    ///         sent mistakenly to the token contract address.\\n    /// @param token The address of the token to be recovered.\\n    /// @param recipient The token recipient address that will receive recovered\\n    ///        tokens.\\n    /// @param amount The amount to be recovered.\\n    function recoverERC20(\\n        IERC20Upgradeable token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwner {\\n        token.safeTransfer(recipient, amount);\\n    }\\n\\n    /// @notice Allows the governance of the token contract to recover any\\n    ///         ERC721 sent mistakenly to the token contract address.\\n    /// @param token The address of the token to be recovered.\\n    /// @param recipient The token recipient address that will receive the\\n    ///        recovered token.\\n    /// @param tokenId The ID of the ERC721 token to be recovered.\\n    function recoverERC721(\\n        IERC721Upgradeable token,\\n        address recipient,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external onlyOwner {\\n        token.safeTransferFrom(address(this), recipient, tokenId, data);\\n    }\\n\\n    /// @notice Allows one of the guardians to pause mints and burns allowing\\n    ///         avoidance of contagion in case of a chain- or bridge-specific\\n    ///         incident.\\n    /// @dev Requirements:\\n    ///      - The caller must be a guardian.\\n    ///      - The contract must not be already paused.\\n    function pause() external onlyGuardian {\\n        _pause();\\n    }\\n\\n    /// @notice Allows the governance to unpause mints and burns previously\\n    ///         paused by one of the guardians.\\n    /// @dev Requirements:\\n    ///      - The caller must be the contract owner.\\n    ///      - The contract must be paused.\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice Allows one of the minters to mint `amount` tokens and assign\\n    ///         them to `account`, increasing the total supply. Emits\\n    ///         a `Transfer` event with `from` set to the zero address.\\n    /// @dev Requirements:\\n    ///      - The caller must be a minter.\\n    ///      - `account` must not be the zero address.\\n    /// @param account The address to receive tokens.\\n    /// @param amount The amount of token to be minted.\\n    function mint(address account, uint256 amount)\\n        external\\n        whenNotPaused\\n        onlyMinter\\n    {\\n        _mint(account, amount);\\n    }\\n\\n    /// @notice Destroys `amount` tokens from the caller. Emits a `Transfer`\\n    ///         event with `to` set to the zero address.\\n    /// @dev Requirements:\\n    ///      - The caller must have at least `amount` tokens.\\n    /// @param amount The amount of token to be burned.\\n    function burn(uint256 amount) public override whenNotPaused {\\n        super.burn(amount);\\n    }\\n\\n    /// @notice Destroys `amount` tokens from `account`, deducting from the\\n    ///         caller's allowance. Emits a `Transfer` event with `to` set to\\n    ///         the zero address.\\n    /// @dev Requirements:\\n    ///      - The che caller must have allowance for `accounts`'s tokens of at\\n    ///        least `amount`.\\n    ///      - `account` must not be the zero address.\\n    ///      - `account` must have at least `amount` tokens.\\n    /// @param account The address owning tokens to be burned.\\n    /// @param amount The amount of token to be burned.\\n    function burnFrom(address account, uint256 amount)\\n        public\\n        override\\n        whenNotPaused\\n    {\\n        super.burnFrom(account, amount);\\n    }\\n\\n    /// @notice Allows to fetch a list of all minters.\\n    function getMinters() external view returns (address[] memory) {\\n        return minters;\\n    }\\n\\n    /// @notice Allows to fetch a list of all guardians.\\n    function getGuardians() external view returns (address[] memory) {\\n        return guardians;\\n    }\\n}\\n\",\"keccak256\":\"0x0ad24408cfce03caefa5f9c95b664f75867670b39016c059a28618e0e822ac85\",\"license\":\"GPL-3.0-only\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfe1053f3a6ee4527cde96c8152b8b1dbb98774639a64e819087bc80e618d7f7f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/wormhole/BaseWormholeGatewayUpgraded.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./L2WormholeGateway.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\n\\r\\n/// @notice Wormhole gateway for L2 Base - upgraded version.\\r\\n/// @dev This contract is intended solely for testing purposes. As it currently\\r\\n///      stands in the implementation of L2WormholeGateway.sol, there are no\\r\\n///      reserved storage gap slots available, thereby limiting the upgradability\\r\\n///      to a child contract only.\\r\\ncontract BaseWormholeGatewayUpgraded is L2WormholeGateway {\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /// @notice This function is called when the user sends their token from L2.\\r\\n    ///         The contract burns the canonical tBTC from the user and sends\\r\\n    ///         wormhole tBTC representation over the bridge.\\r\\n    ///         Keep in mind that when multiple bridges receive a minting\\r\\n    ///         authority on the canonical tBTC, this function may not be able\\r\\n    ///         to send all amounts of tBTC through the Wormhole bridge. The\\r\\n    ///         capability of Wormhole Bridge to send tBTC from the chain is\\r\\n    ///         limited to the amount of tBTC bridged through Wormhole to that\\r\\n    ///         chain.\\r\\n    /// @dev Requirements:\\r\\n    ///      - The native chain doesn't have a Wormhole tBTC gateway, so the token\\r\\n    ///        minted by Wormhole should be considered canonical.\\r\\n    ///      - The sender must have at least `amount` of the canonical tBTC and\\r\\n    ///        it has to be approved for L2WormholeGateway.\\r\\n    ///      - The L2WormholeGateway must have at least `amount` of the wormhole\\r\\n    ///        tBTC.\\r\\n    ///      - The recipient must not be 0x0.\\r\\n    ///      - The amount to transfer must not be 0,\\r\\n    ///      - The amount to transfer must be >= 10^10 (1e18 precision).\\r\\n    ///      This function uses `transferTokensWithPayload` to send tBTC directly\\r\\n    ///      to the `recipient` contract address on the recipient chain. The `arbiterFee` is\\r\\n    ///      not applicable and implicitly 0.\\r\\n    /// @param amount The amount of tBTC to be sent.\\r\\n    /// @param recipientNativeChain The Wormhole chain ID of the recipient chain.\\r\\n    /// @param recipient The Wormhole-formatted address of the target contract on the recipient chain\\r\\n    ///                  that will receive the tokens and process the payload.\\r\\n    /// @param nonce The Wormhole nonce used to batch messages together.\\r\\n    /// @param payload The arbitrary data to be passed to and processed by the `recipient`\\r\\n    ///                contract on the recipient chain.\\r\\n    /// @return The Wormhole sequence number.\\r\\n    function sendTbtcWithPayloadToNativeChain(\\r\\n        uint256 amount,\\r\\n        uint16 recipientNativeChain,\\r\\n        bytes32 recipient,\\r\\n        uint32 nonce,\\r\\n        bytes calldata payload\\r\\n    ) external payable nonReentrant returns (uint64) {\\r\\n        require(\\r\\n            gateways[recipientNativeChain] == bytes32(0),\\r\\n            \\\"No Wormhole tBTC gateway on the native chain\\\"\\r\\n        );\\r\\n        require(recipient != bytes32(0), \\\"0x0 recipient not allowed\\\");\\r\\n        require(amount != 0, \\\"Amount must not be 0\\\");\\r\\n\\r\\n        // Normalize the amount to bridge. The dust can not be bridged due to\\r\\n        // the decimal shift in the Wormhole Bridge contract.\\r\\n        amount = normalize(amount);\\r\\n\\r\\n        // Check again after dropping the dust.\\r\\n        require(amount != 0, \\\"Amount too low to bridge\\\");\\r\\n\\r\\n        require(\\r\\n            bridgeToken.balanceOf(address(this)) >= amount,\\r\\n            \\\"Not enough wormhole tBTC in the gateway to bridge\\\"\\r\\n        );\\r\\n\\r\\n        emit WormholeTbtcSent(\\r\\n            amount,\\r\\n            recipientNativeChain,\\r\\n            bytes32(0), // No specific tBTC gateway from 'gateways' mapping is used; 'recipient' is the direct target contract.\\r\\n            recipient,\\r\\n            0, // arbiterFee is 0 as this function sends with payload\\r\\n            nonce\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            mintedAmount >= amount,\\r\\n            \\\"L2WormholeGateway: amount to send exceeds minted amount\\\"\\r\\n        );\\r\\n        mintedAmount -= amount;\\r\\n        tbtc.burnFrom(msg.sender, amount);\\r\\n        bridgeToken.safeApprove(address(bridge), amount);\\r\\n\\r\\n        return\\r\\n            bridge.transferTokensWithPayload{value: msg.value}(\\r\\n                address(bridgeToken),\\r\\n                amount,\\r\\n                recipientNativeChain,\\r\\n                recipient,\\r\\n                nonce,\\r\\n                payload\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x250ef06f453c252c7e985c3ad11161d469ed7b59bcb8aa8622abd33505312c52\",\"license\":\"GPL-3.0-only\"},\"contracts/wormhole/L2WormholeGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\nimport \\\"@keep-network/tbtc-v2/contracts/l2/L2TBTC.sol\\\";\\r\\n\\r\\n/// @title IWormholeTokenBridge\\r\\n/// @notice Wormhole Token Bridge interface. Contains only selected functions\\r\\n///         used by L2WormholeGateway.\\r\\ninterface IWormholeTokenBridge {\\r\\n    function completeTransferWithPayload(bytes memory encodedVm)\\r\\n        external\\r\\n        returns (bytes memory);\\r\\n\\r\\n    function parseTransferWithPayload(bytes memory encoded)\\r\\n        external\\r\\n        pure\\r\\n        returns (TransferWithPayload memory transfer);\\r\\n\\r\\n    function transferTokens(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint16 recipientChain,\\r\\n        bytes32 recipient,\\r\\n        uint256 arbiterFee,\\r\\n        uint32 nonce\\r\\n    ) external payable returns (uint64 sequence);\\r\\n\\r\\n    function transferTokensWithPayload(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint16 recipientChain,\\r\\n        bytes32 recipient,\\r\\n        uint32 nonce,\\r\\n        bytes memory payload\\r\\n    ) external payable returns (uint64 sequence);\\r\\n\\r\\n    struct TransferWithPayload {\\r\\n        uint8 payloadID;\\r\\n        uint256 amount;\\r\\n        bytes32 tokenAddress;\\r\\n        uint16 tokenChain;\\r\\n        bytes32 to;\\r\\n        uint16 toChain;\\r\\n        bytes32 fromAddress;\\r\\n        bytes payload;\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @title L2WormholeGateway\\r\\n/// @notice Selected cross-ecosystem bridges are given the minting authority for\\r\\n///         tBTC token on L2 and sidechains. This contract gives a minting\\r\\n///         authority to the Wormhole Bridge.\\r\\n///\\r\\n///         The process of bridging from L1 to L2 (or sidechain) looks as\\r\\n///         follows:\\r\\n///         1. There is a tBTC holder on L1. The holder goes to the Wormhole\\r\\n///            Portal and selects the chain they want to bridge to.\\r\\n///         2. The holder submits one transaction to L1 locking their tBTC\\r\\n///            tokens in the bridge\\u2019s smart contract. After the transaction is\\r\\n///            mined, they wait about 15 minutes for the Ethereum block\\r\\n///            finality.\\r\\n///         3. The holder submits one transaction to L2 that is minting tokens.\\r\\n///            After that transaction is mined, they have their tBTC on L2.\\r\\n///\\r\\n///         The process of bridging from L2 (or sidechain) to L1 looks as\\r\\n///         follows:\\r\\n///         1. There is a tBTC holder on L2. That holder goes to the Wormhole\\r\\n///            Portal and selects one of the L2 chains they want to bridge from.\\r\\n///         2. The holder submits one transaction to L2 that is burning the\\r\\n///            token. After the transaction is mined, they wait about 15 minutes\\r\\n///            for the L2 block finality.\\r\\n///         3. The holder submits one transaction to L1 unlocking their tBTC\\r\\n///            tokens from the bridge\\u2019s smart contract. After that transaction\\r\\n///            is mined, they have their tBTC on L1.\\r\\n///\\r\\n///         This smart contract is integrated with step 3 of L1->L2 bridging and\\r\\n///         step 1 of L2->L1 or L2->L2 bridging. When the user redeems token on\\r\\n///         L2, this contract receives the Wormhole tBTC representation and\\r\\n///         mints the canonical tBTC in an equal amount. When user sends their\\r\\n///         token from L1, this contract burns the canonical tBTC and sends\\r\\n///         Wormhole tBTC representation through the bridge in an equal amount.\\r\\n/// @dev This contract is supposed to be deployed behind a transparent\\r\\n///      upgradeable proxy.\\r\\ncontract L2WormholeGateway is\\r\\n    Initializable,\\r\\n    OwnableUpgradeable,\\r\\n    ReentrancyGuardUpgradeable\\r\\n{\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    /// @notice Reference to the Wormhole Token Bridge contract.\\r\\n    IWormholeTokenBridge public bridge;\\r\\n\\r\\n    /// @notice Wormhole tBTC token representation.\\r\\n    IERC20Upgradeable public bridgeToken;\\r\\n\\r\\n    /// @notice Canonical tBTC token.\\r\\n    L2TBTC public tbtc;\\r\\n\\r\\n    /// @notice Maps Wormhole chain ID to the Wormhole tBTC gateway address on\\r\\n    ///         that chain. For example, this chain's ID should be mapped to\\r\\n    ///         this contract's address. If there is no Wormhole tBTC gateway\\r\\n    ///         address on the given chain, there is no entry in this mapping.\\r\\n    ///         The mapping holds addresses in a Wormhole-specific format, where\\r\\n    ///         Ethereum address is left-padded with zeros.\\r\\n    mapping(uint16 => bytes32) public gateways;\\r\\n\\r\\n    /// @notice Minting limit for this gateway. Useful for early days of testing\\r\\n    ///         the system. The gateway can not mint more canonical tBTC than\\r\\n    ///         this limit.\\r\\n    uint256 public mintingLimit;\\r\\n\\r\\n    /// @notice The amount of tBTC minted by this contract. tBTC burned by this\\r\\n    ///         contract decreases this amount.\\r\\n    uint256 public mintedAmount;\\r\\n\\r\\n    event WormholeTbtcReceived(address receiver, uint256 amount);\\r\\n\\r\\n    event WormholeTbtcSent(\\r\\n        uint256 amount,\\r\\n        uint16 recipientChain,\\r\\n        bytes32 gateway,\\r\\n        bytes32 recipient,\\r\\n        uint256 arbiterFee,\\r\\n        uint32 nonce\\r\\n    );\\r\\n\\r\\n    event WormholeTbtcDeposited(address depositor, uint256 amount);\\r\\n\\r\\n    event GatewayAddressUpdated(uint16 chainId, bytes32 gateway);\\r\\n\\r\\n    event MintingLimitUpdated(uint256 mintingLimit);\\r\\n\\r\\n    function initialize(\\r\\n        IWormholeTokenBridge _bridge,\\r\\n        IERC20Upgradeable _bridgeToken,\\r\\n        L2TBTC _tbtc\\r\\n    ) external initializer {\\r\\n        __Ownable_init();\\r\\n        __ReentrancyGuard_init();\\r\\n\\r\\n        require(\\r\\n            address(_bridge) != address(0),\\r\\n            \\\"Wormhole bridge address must not be 0x0\\\"\\r\\n        );\\r\\n        require(\\r\\n            address(_bridgeToken) != address(0),\\r\\n            \\\"Bridge token address must not be 0x0\\\"\\r\\n        );\\r\\n        require(\\r\\n            address(_tbtc) != address(0),\\r\\n            \\\"L2TBTC token address must not be 0x0\\\"\\r\\n        );\\r\\n\\r\\n        bridge = _bridge;\\r\\n        bridgeToken = _bridgeToken;\\r\\n        tbtc = _tbtc;\\r\\n        mintingLimit = type(uint256).max;\\r\\n    }\\r\\n\\r\\n    /// @notice This function is called when the user sends their token from L2.\\r\\n    ///         The contract burns the canonical tBTC from the user and sends\\r\\n    ///         wormhole tBTC representation over the bridge.\\r\\n    ///         Keep in mind that when multiple bridges receive a minting\\r\\n    ///         authority on the canonical tBTC, this function may not be able\\r\\n    ///         to send all amounts of tBTC through the Wormhole bridge. The\\r\\n    ///         capability of Wormhole Bridge to send tBTC from the chain is\\r\\n    ///         limited to the amount of tBTC bridged through Wormhole to that\\r\\n    ///         chain.\\r\\n    /// @dev Requirements:\\r\\n    ///      - The sender must have at least `amount` of the canonical tBTC and\\r\\n    ///        it has to be approved for L2WormholeGateway.\\r\\n    ///      - The L2WormholeGateway must have at least `amount` of the wormhole\\r\\n    ///        tBTC.\\r\\n    ///      - The recipient must not be 0x0.\\r\\n    ///      - The amount to transfer must not be 0,\\r\\n    ///      - The amount to transfer must be >= 10^10 (1e18 precision).\\r\\n    ///      Depending if Wormhole tBTC gateway is registered on the target\\r\\n    ///      chain, this function uses transfer or transfer with payload over\\r\\n    ///      the Wormhole bridge.\\r\\n    /// @param amount The amount of tBTC to be sent.\\r\\n    /// @param recipientChain The Wormhole recipient chain ID.\\r\\n    /// @param recipient The address of the recipient in the Wormhole format.\\r\\n    /// @param arbiterFee The Wormhole arbiter fee. Ignored if sending\\r\\n    ///                   tBTC to chain with Wormhole tBTC gateway.\\r\\n    /// @param nonce The Wormhole nonce used to batch messages together.\\r\\n    /// @return The Wormhole sequence number.\\r\\n    function sendTbtc(\\r\\n        uint256 amount,\\r\\n        uint16 recipientChain,\\r\\n        bytes32 recipient,\\r\\n        uint256 arbiterFee,\\r\\n        uint32 nonce\\r\\n    ) external payable nonReentrant returns (uint64) {\\r\\n        require(recipient != bytes32(0), \\\"0x0 recipient not allowed\\\");\\r\\n        require(amount != 0, \\\"Amount must not be 0\\\");\\r\\n\\r\\n        // Normalize the amount to bridge. The dust can not be bridged due to\\r\\n        // the decimal shift in the Wormhole Bridge contract.\\r\\n        amount = normalize(amount);\\r\\n\\r\\n        // Check again after dropping the dust.\\r\\n        require(amount != 0, \\\"Amount too low to bridge\\\");\\r\\n\\r\\n        require(\\r\\n            bridgeToken.balanceOf(address(this)) >= amount,\\r\\n            \\\"Not enough wormhole tBTC in the gateway to bridge\\\"\\r\\n        );\\r\\n\\r\\n        bytes32 gateway = gateways[recipientChain];\\r\\n\\r\\n        emit WormholeTbtcSent(\\r\\n            amount,\\r\\n            recipientChain,\\r\\n            gateway,\\r\\n            recipient,\\r\\n            arbiterFee,\\r\\n            nonce\\r\\n        );\\r\\n\\r\\n        mintedAmount -= amount;\\r\\n        tbtc.burnFrom(msg.sender, amount);\\r\\n        bridgeToken.safeApprove(address(bridge), amount);\\r\\n\\r\\n        if (gateway == bytes32(0)) {\\r\\n            // No Wormhole tBTC gateway on the target chain. The token minted\\r\\n            // by Wormhole should be considered canonical.\\r\\n            return\\r\\n                bridge.transferTokens{value: msg.value}(\\r\\n                    address(bridgeToken),\\r\\n                    amount,\\r\\n                    recipientChain,\\r\\n                    recipient,\\r\\n                    arbiterFee,\\r\\n                    nonce\\r\\n                );\\r\\n        } else {\\r\\n            // There is a Wormhole tBTC gateway on the target chain.\\r\\n            // The gateway needs to mint canonical tBTC for the recipient\\r\\n            // encoded in the payload.\\r\\n            return\\r\\n                bridge.transferTokensWithPayload{value: msg.value}(\\r\\n                    address(bridgeToken),\\r\\n                    amount,\\r\\n                    recipientChain,\\r\\n                    gateway,\\r\\n                    nonce,\\r\\n                    abi.encode(recipient)\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice This function is called when the user redeems their token on L2.\\r\\n    ///         The contract receives Wormhole tBTC representation and mints the\\r\\n    ///         canonical tBTC for the user.\\r\\n    ///         If the tBTC minting limit has been reached by this contract,\\r\\n    ///         instead of minting tBTC the receiver address receives Wormhole\\r\\n    ///         tBTC representation.\\r\\n    /// @dev Requirements:\\r\\n    ///      - The receiver of Wormhole tBTC should be the L2WormholeGateway\\r\\n    ///        contract.\\r\\n    ///      - The receiver of the canonical tBTC should be abi-encoded in the\\r\\n    ///        payload.\\r\\n    ///      - The receiver of the canonical tBTC must not be the zero address.\\r\\n    ///\\r\\n    ///      The Wormhole Token Bridge contract has protection against redeeming\\r\\n    ///      the same VAA again. When a Token Bridge VAA is redeemed, its\\r\\n    ///      message body hash is stored in a map. This map is used to check\\r\\n    ///      whether the hash has already been set in this map. For this reason,\\r\\n    ///      this function does not have to be nonReentrant in theory. However,\\r\\n    ///      to make this function non-dependent on Wormhole Bridge implementation,\\r\\n    ///      we are making it nonReentrant anyway.\\r\\n    /// @param encodedVm A byte array containing a Wormhole VAA signed by the\\r\\n    ///        guardians.\\r\\n    function receiveTbtc(bytes calldata encodedVm) external nonReentrant {\\r\\n        // ITokenBridge.completeTransferWithPayload completes a contract-controlled\\r\\n        // transfer of an ERC20 token. Calling this function is not enough to\\r\\n        // ensure L2WormholeGateway received Wormhole tBTC representation.\\r\\n        // Instead of going too deep into the ITokenBridge implementation,\\r\\n        // asserting who is the receiver of the token, and which token it is,\\r\\n        // we check the balance before the ITokenBridge call and the balance\\r\\n        // after ITokenBridge call. This way, we are sure this contract received\\r\\n        // Wormhole tBTC token in the given amount. This is transparent to\\r\\n        // all potential upgrades of ITokenBridge implementation and no other\\r\\n        // validations are needed.\\r\\n        uint256 balanceBefore = bridgeToken.balanceOf(address(this));\\r\\n        bytes memory encoded = bridge.completeTransferWithPayload(encodedVm);\\r\\n        uint256 balanceAfter = bridgeToken.balanceOf(address(this));\\r\\n\\r\\n        uint256 amount = balanceAfter - balanceBefore;\\r\\n        // Protect against the custody of irrelevant tokens.\\r\\n        require(amount > 0, \\\"No tBTC transferred\\\");\\r\\n\\r\\n        address receiver = fromWormholeAddress(\\r\\n            bytes32(bridge.parseTransferWithPayload(encoded).payload)\\r\\n        );\\r\\n        require(receiver != address(0), \\\"0x0 receiver not allowed\\\");\\r\\n\\r\\n        // We send wormhole tBTC OR mint canonical tBTC. We do not want to send\\r\\n        // dust. Sending wormhole tBTC is an exceptional situation and we want\\r\\n        // to keep it simple.\\r\\n        if (mintedAmount + amount > mintingLimit) {\\r\\n            bridgeToken.safeTransfer(receiver, amount);\\r\\n        } else {\\r\\n            // The function is non-reentrant.\\r\\n            // slither-disable-next-line reentrancy-benign\\r\\n            mintedAmount += amount;\\r\\n            tbtc.mint(receiver, amount);\\r\\n        }\\r\\n\\r\\n        // The function is non-reentrant.\\r\\n        // slither-disable-next-line reentrancy-events\\r\\n        emit WormholeTbtcReceived(receiver, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Lets the governance to update the tBTC gateway address on the\\r\\n    ///         chain with the given Wormhole ID.\\r\\n    /// @dev Use toWormholeAddress function to convert between Ethereum and\\r\\n    ///      Wormhole address formats.\\r\\n    /// @param chainId Wormhole ID of the chain.\\r\\n    /// @param gateway Address of tBTC gateway on the given chain in a Wormhole\\r\\n    ///                format.\\r\\n    function updateGatewayAddress(uint16 chainId, bytes32 gateway)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        gateways[chainId] = gateway;\\r\\n        emit GatewayAddressUpdated(chainId, gateway);\\r\\n    }\\r\\n\\r\\n    /// @notice Lets the governance to update the tBTC minting limit for this\\r\\n    ///         contract.\\r\\n    /// @param _mintingLimit The new minting limit.\\r\\n    function updateMintingLimit(uint256 _mintingLimit) external onlyOwner {\\r\\n        mintingLimit = _mintingLimit;\\r\\n        emit MintingLimitUpdated(_mintingLimit);\\r\\n    }\\r\\n\\r\\n    /// @notice Converts Ethereum address into Wormhole format.\\r\\n    /// @param _address The address to convert.\\r\\n    function toWormholeAddress(address _address)\\r\\n        external\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return bytes32(uint256(uint160(_address)));\\r\\n    }\\r\\n\\r\\n    /// @notice Converts Wormhole address into Ethereum format.\\r\\n    /// @param _address The address to convert.\\r\\n    function fromWormholeAddress(bytes32 _address)\\r\\n        public\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        return address(uint160(uint256(_address)));\\r\\n    }\\r\\n\\r\\n    /// @dev Eliminates the dust that cannot be bridged with Wormhole\\r\\n    ///      due to the decimal shift in the Wormhole Bridge contract.\\r\\n    ///      See https://github.com/wormhole-foundation/wormhole/blob/96682bdbeb7c87bfa110eade0554b3d8cbf788d2/ethereum/contracts/bridge/Bridge.sol#L276-L288\\r\\n    function normalize(uint256 amount) internal pure returns (uint256) {\\r\\n        // slither-disable-next-line divide-before-multiply\\r\\n        amount /= 10**10;\\r\\n        amount *= 10**10;\\r\\n        return amount;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7d06051ea9267e6872c2bb1ef148d342b4e6d8b435d621f7cb2b578478883233\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61223c80620000ee6000396000f3fe60806040526004361061010e5760003560e01c80638da5cb5b116100a5578063e1308b3311610074578063f2fde38b11610059578063f2fde38b146102fd578063f4734b0c1461031d578063f69785f31461033d57600080fd5b8063e1308b33146102bd578063e78cea92146102dd57600080fd5b80638da5cb5b1461022b578063b4ccd86814610249578063c0c53b8b14610276578063ca05f9851461029657600080fd5b806349072f12116100e157806349072f12146101c05780635d21a596146101d6578063715018a6146101f657806375b1beaa1461020b57600080fd5b80630b575fe6146101135780632d3802421461014e57806331f01ed714610172578063363da98e1461019e575b600080fd5b34801561011f57600080fd5b5061013161012e366004611b69565b90565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015a57600080fd5b50610164609c5481565b604051908152602001610145565b610185610180366004611bf4565b610350565b60405167ffffffffffffffff9091168152602001610145565b3480156101aa57600080fd5b506101be6101b9366004611b69565b6107c7565b005b3480156101cc57600080fd5b50610164609b5481565b3480156101e257600080fd5b506101be6101f1366004611c6e565b61080a565b34801561020257600080fd5b506101be610c02565b34801561021757600080fd5b506101be610226366004611cb0565b610c16565b34801561023757600080fd5b506033546001600160a01b0316610131565b34801561025557600080fd5b50610164610264366004611cdc565b609a6020526000908152604090205481565b34801561028257600080fd5b506101be610291366004611d15565b610c71565b3480156102a257600080fd5b506101646102b1366004611d60565b6001600160a01b031690565b3480156102c957600080fd5b50609954610131906001600160a01b031681565b3480156102e957600080fd5b50609754610131906001600160a01b031681565b34801561030957600080fd5b506101be610318366004611d60565b610f2c565b34801561032957600080fd5b50609854610131906001600160a01b031681565b61018561034b366004611d7d565b610fbc565b600061035a6113db565b61ffff86166000908152609a6020526040902054156103e65760405162461bcd60e51b815260206004820152602c60248201527f4e6f20576f726d686f6c6520744254432067617465776179206f6e207468652060448201527f6e617469766520636861696e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b846104335760405162461bcd60e51b815260206004820152601960248201527f30783020726563697069656e74206e6f7420616c6c6f7765640000000000000060448201526064016103dd565b866000036104835760405162461bcd60e51b815260206004820152601460248201527f416d6f756e74206d757374206e6f74206265203000000000000000000000000060448201526064016103dd565b61048c87611434565b9650866000036104de5760405162461bcd60e51b815260206004820152601860248201527f416d6f756e7420746f6f206c6f7720746f20627269646765000000000000000060448201526064016103dd565b6098546040516370a0823160e01b815230600482015288916001600160a01b0316906370a0823190602401602060405180830381865afa158015610526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054a9190611dcf565b10156105be5760405162461bcd60e51b815260206004820152603160248201527f4e6f7420656e6f75676820776f726d686f6c65207442544320696e207468652060448201527f6761746577617920746f2062726964676500000000000000000000000000000060648201526084016103dd565b6040805188815261ffff88166020820152600081830181905260608201889052608082015263ffffffff861660a082015290517ffcdb8efef11d13bb0ebc515477ece314fdac305aeba3d6d9d371838bbe2435cf9181900360c00190a186609c5410156106935760405162461bcd60e51b815260206004820152603760248201527f4c32576f726d686f6c65476174657761793a20616d6f756e7420746f2073656e60448201527f642065786365656473206d696e74656420616d6f756e7400000000000000000060648201526084016103dd565b86609c60008282546106a59190611dfe565b909155505060995460405163079cc67960e41b8152336004820152602481018990526001600160a01b03909116906379cc679090604401600060405180830381600087803b1580156106f657600080fd5b505af115801561070a573d6000803e3d6000fd5b505060975460985461072b93506001600160a01b039081169250168961145c565b6097546098546040516362d2f5ed60e11b81526001600160a01b039283169263c5a5ebda92349261076e92909116908c908c908c908c908c908c90600401611e3a565b60206040518083038185885af115801561078c573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906107b19190611e8c565b90506107bd6001606555565b9695505050505050565b6107cf611616565b609b8190556040518181527f876c61ade8d7fbb62356eefa0f1cb0d6d95fc5269dbe8d0d636051daa88d73999060200160405180910390a150565b6108126113db565b6098546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561085b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087f9190611dcf565b6097546040517fc3f511c10000000000000000000000000000000000000000000000000000000081529192506000916001600160a01b039091169063c3f511c1906108d09087908790600401611eb6565b6000604051808303816000875af11580156108ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109179190810190611fac565b6098546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109899190611dcf565b905060006109978483611dfe565b9050600081116109e95760405162461bcd60e51b815260206004820152601360248201527f4e6f2074425443207472616e736665727265640000000000000000000000000060448201526064016103dd565b6097546040517fea63738d000000000000000000000000000000000000000000000000000000008152600091610a8b916001600160a01b039091169063ea63738d90610a3990889060040161200d565b600060405180830381865afa158015610a56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7e919081019061203c565b60e0015161012e90612105565b90506001600160a01b038116610ae35760405162461bcd60e51b815260206004820152601860248201527f307830207265636569766572206e6f7420616c6c6f776564000000000000000060448201526064016103dd565b609b5482609c54610af4919061212c565b1115610b1657609854610b11906001600160a01b03168284611670565b610bad565b81609c6000828254610b28919061212c565b90915550506099546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260248201859052909116906340c10f1990604401600060405180830381600087803b158015610b9457600080fd5b505af1158015610ba8573d6000803e3d6000fd5b505050505b604080516001600160a01b0383168152602081018490527fc7f080a0d33152d54d5972f0bac2d7984089c4849e2af42bca1a572728d339d7910160405180910390a15050505050610bfe6001606555565b5050565b610c0a611616565b610c1460006116b9565b565b610c1e611616565b61ffff82166000818152609a6020908152604091829020849055815192835282018390527f1b29e2aa7a790fb04e7d6d73bf7ca63e2b4b1ffe0354fe94b4739c91f1a15359910160405180910390a15050565b600054610100900460ff1615808015610c915750600054600160ff909116105b80610cab5750303b158015610cab575060005460ff166001145b610d1d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103dd565b6000805460ff191660011790558015610d40576000805461ff0019166101001790555b610d48611718565b610d5061178b565b6001600160a01b038416610dcc5760405162461bcd60e51b815260206004820152602760248201527f576f726d686f6c65206272696467652061646472657373206d757374206e6f7460448201527f206265203078300000000000000000000000000000000000000000000000000060648201526084016103dd565b6001600160a01b038316610e2e5760405162461bcd60e51b8152602060048201526024808201527f42726964676520746f6b656e2061646472657373206d757374206e6f742062656044820152630203078360e41b60648201526084016103dd565b6001600160a01b038216610e905760405162461bcd60e51b8152602060048201526024808201527f4c325442544320746f6b656e2061646472657373206d757374206e6f742062656044820152630203078360e41b60648201526084016103dd565b609780546001600160a01b0380871673ffffffffffffffffffffffffffffffffffffffff1992831617909255609880548684169083161790556099805492851692909116919091179055600019609b558015610f26576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b610f34611616565b6001600160a01b038116610fb05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103dd565b610fb9816116b9565b50565b6000610fc66113db565b836110135760405162461bcd60e51b815260206004820152601960248201527f30783020726563697069656e74206e6f7420616c6c6f7765640000000000000060448201526064016103dd565b856000036110635760405162461bcd60e51b815260206004820152601460248201527f416d6f756e74206d757374206e6f74206265203000000000000000000000000060448201526064016103dd565b61106c86611434565b9550856000036110be5760405162461bcd60e51b815260206004820152601860248201527f416d6f756e7420746f6f206c6f7720746f20627269646765000000000000000060448201526064016103dd565b6098546040516370a0823160e01b815230600482015287916001600160a01b0316906370a0823190602401602060405180830381865afa158015611106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112a9190611dcf565b101561119e5760405162461bcd60e51b815260206004820152603160248201527f4e6f7420656e6f75676820776f726d686f6c65207442544320696e207468652060448201527f6761746577617920746f2062726964676500000000000000000000000000000060648201526084016103dd565b61ffff85166000818152609a60209081526040918290205482518a815291820193909352908101829052606081018690526080810185905263ffffffff841660a08201527ffcdb8efef11d13bb0ebc515477ece314fdac305aeba3d6d9d371838bbe2435cf9060c00160405180910390a186609c60008282546112219190611dfe565b909155505060995460405163079cc67960e41b8152336004820152602481018990526001600160a01b03909116906379cc679090604401600060405180830381600087803b15801561127257600080fd5b505af1158015611286573d6000803e3d6000fd5b50506097546098546112a793506001600160a01b039081169250168961145c565b8061136d576097546098546040517f0f5287b00000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018a905261ffff89166044820152606481018890526084810187905263ffffffff861660a4820152911690630f5287b090349060c4015b60206040518083038185885af1158015611340573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113659190611e8c565b9150506113c8565b6097546098546040805160208082018a905282518083039091018152818301928390526362d2f5ed60e11b9092526001600160a01b039384169363c5a5ebda9334936113229392909116918d918d9189918c9160440161213f565b6113d26001606555565b95945050505050565b60026065540361142d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103dd565b6002606555565b60006114456402540be4008361218f565b91506114566402540be400836121b1565b92915050565b8015806114ef57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156114c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ed9190611dcf565b155b6115615760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016103dd565b6040516001600160a01b03831660248201526044810182905261160a9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526117fe565b505050565b6001606555565b6033546001600160a01b03163314610c145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103dd565b6040516001600160a01b03831660248201526044810182905261160a9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016115a6565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166117835760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016103dd565b610c146118e3565b600054610100900460ff166117f65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016103dd565b610c14611957565b6000611853826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119c29092919063ffffffff16565b80519091501561160a578080602001905181019061187191906121c8565b61160a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103dd565b600054610100900460ff1661194e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016103dd565b610c14336116b9565b600054610100900460ff1661160f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016103dd565b60606119d184846000856119d9565b949350505050565b606082471015611a515760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103dd565b600080866001600160a01b03168587604051611a6d91906121ea565b60006040518083038185875af1925050503d8060008114611aaa576040519150601f19603f3d011682016040523d82523d6000602084013e611aaf565b606091505b5091509150611ac087838387611acb565b979650505050505050565b60608315611b3a578251600003611b33576001600160a01b0385163b611b335760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103dd565b50816119d1565b6119d18383815115611b4f5781518083602001fd5b8060405162461bcd60e51b81526004016103dd919061200d565b600060208284031215611b7b57600080fd5b5035919050565b61ffff81168114610fb957600080fd5b803563ffffffff81168114611ba657600080fd5b919050565b60008083601f840112611bbd57600080fd5b50813567ffffffffffffffff811115611bd557600080fd5b602083019150836020828501011115611bed57600080fd5b9250929050565b60008060008060008060a08789031215611c0d57600080fd5b863595506020870135611c1f81611b82565b945060408701359350611c3460608801611b92565b9250608087013567ffffffffffffffff811115611c5057600080fd5b611c5c89828a01611bab565b979a9699509497509295939492505050565b60008060208385031215611c8157600080fd5b823567ffffffffffffffff811115611c9857600080fd5b611ca485828601611bab565b90969095509350505050565b60008060408385031215611cc357600080fd5b8235611cce81611b82565b946020939093013593505050565b600060208284031215611cee57600080fd5b8135611cf981611b82565b9392505050565b6001600160a01b0381168114610fb957600080fd5b600080600060608486031215611d2a57600080fd5b8335611d3581611d00565b92506020840135611d4581611d00565b91506040840135611d5581611d00565b809150509250925092565b600060208284031215611d7257600080fd5b8135611cf981611d00565b600080600080600060a08688031215611d9557600080fd5b853594506020860135611da781611b82565b93506040860135925060608601359150611dc360808701611b92565b90509295509295909350565b600060208284031215611de157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561145657611456611de8565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038816815286602082015261ffff8616604082015284606082015263ffffffff8416608082015260c060a08201526000611e7f60c083018486611e11565b9998505050505050505050565b600060208284031215611e9e57600080fd5b815167ffffffffffffffff81168114611cf957600080fd5b6020815260006119d1602083018486611e11565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715611f0457611f04611eca565b60405290565b60005b83811015611f25578181015183820152602001611f0d565b50506000910152565b600082601f830112611f3f57600080fd5b815167ffffffffffffffff80821115611f5a57611f5a611eca565b604051601f8301601f19908116603f01168101908282118183101715611f8257611f82611eca565b81604052838152866020858801011115611f9b57600080fd5b6107bd846020830160208901611f0a565b600060208284031215611fbe57600080fd5b815167ffffffffffffffff811115611fd557600080fd5b6119d184828501611f2e565b60008151808452611ff9816020860160208601611f0a565b601f01601f19169290920160200192915050565b602081526000611cf96020830184611fe1565b805160ff81168114611ba657600080fd5b8051611ba681611b82565b60006020828403121561204e57600080fd5b815167ffffffffffffffff8082111561206657600080fd5b90830190610100828603121561207b57600080fd5b612083611ee0565b61208c83612020565b815260208301516020820152604083015160408201526120ae60608401612031565b6060820152608083015160808201526120c960a08401612031565b60a082015260c083015160c082015260e0830151828111156120ea57600080fd5b6120f687828601611f2e565b60e08301525095945050505050565b80516020808301519190811015612126576000198160200360031b1b821691505b50919050565b8082018082111561145657611456611de8565b6001600160a01b038716815285602082015261ffff8516604082015283606082015263ffffffff8316608082015260c060a0820152600061218360c0830184611fe1565b98975050505050505050565b6000826121ac57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761145657611456611de8565b6000602082840312156121da57600080fd5b81518015158114611cf957600080fd5b600082516121fc818460208701611f0a565b919091019291505056fea2646970667358221220a980e3ee7b8c177c2ea46ed6b994a7191861d6bc1954a8addf13602899b8632364736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061010e5760003560e01c80638da5cb5b116100a5578063e1308b3311610074578063f2fde38b11610059578063f2fde38b146102fd578063f4734b0c1461031d578063f69785f31461033d57600080fd5b8063e1308b33146102bd578063e78cea92146102dd57600080fd5b80638da5cb5b1461022b578063b4ccd86814610249578063c0c53b8b14610276578063ca05f9851461029657600080fd5b806349072f12116100e157806349072f12146101c05780635d21a596146101d6578063715018a6146101f657806375b1beaa1461020b57600080fd5b80630b575fe6146101135780632d3802421461014e57806331f01ed714610172578063363da98e1461019e575b600080fd5b34801561011f57600080fd5b5061013161012e366004611b69565b90565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015a57600080fd5b50610164609c5481565b604051908152602001610145565b610185610180366004611bf4565b610350565b60405167ffffffffffffffff9091168152602001610145565b3480156101aa57600080fd5b506101be6101b9366004611b69565b6107c7565b005b3480156101cc57600080fd5b50610164609b5481565b3480156101e257600080fd5b506101be6101f1366004611c6e565b61080a565b34801561020257600080fd5b506101be610c02565b34801561021757600080fd5b506101be610226366004611cb0565b610c16565b34801561023757600080fd5b506033546001600160a01b0316610131565b34801561025557600080fd5b50610164610264366004611cdc565b609a6020526000908152604090205481565b34801561028257600080fd5b506101be610291366004611d15565b610c71565b3480156102a257600080fd5b506101646102b1366004611d60565b6001600160a01b031690565b3480156102c957600080fd5b50609954610131906001600160a01b031681565b3480156102e957600080fd5b50609754610131906001600160a01b031681565b34801561030957600080fd5b506101be610318366004611d60565b610f2c565b34801561032957600080fd5b50609854610131906001600160a01b031681565b61018561034b366004611d7d565b610fbc565b600061035a6113db565b61ffff86166000908152609a6020526040902054156103e65760405162461bcd60e51b815260206004820152602c60248201527f4e6f20576f726d686f6c6520744254432067617465776179206f6e207468652060448201527f6e617469766520636861696e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b846104335760405162461bcd60e51b815260206004820152601960248201527f30783020726563697069656e74206e6f7420616c6c6f7765640000000000000060448201526064016103dd565b866000036104835760405162461bcd60e51b815260206004820152601460248201527f416d6f756e74206d757374206e6f74206265203000000000000000000000000060448201526064016103dd565b61048c87611434565b9650866000036104de5760405162461bcd60e51b815260206004820152601860248201527f416d6f756e7420746f6f206c6f7720746f20627269646765000000000000000060448201526064016103dd565b6098546040516370a0823160e01b815230600482015288916001600160a01b0316906370a0823190602401602060405180830381865afa158015610526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054a9190611dcf565b10156105be5760405162461bcd60e51b815260206004820152603160248201527f4e6f7420656e6f75676820776f726d686f6c65207442544320696e207468652060448201527f6761746577617920746f2062726964676500000000000000000000000000000060648201526084016103dd565b6040805188815261ffff88166020820152600081830181905260608201889052608082015263ffffffff861660a082015290517ffcdb8efef11d13bb0ebc515477ece314fdac305aeba3d6d9d371838bbe2435cf9181900360c00190a186609c5410156106935760405162461bcd60e51b815260206004820152603760248201527f4c32576f726d686f6c65476174657761793a20616d6f756e7420746f2073656e60448201527f642065786365656473206d696e74656420616d6f756e7400000000000000000060648201526084016103dd565b86609c60008282546106a59190611dfe565b909155505060995460405163079cc67960e41b8152336004820152602481018990526001600160a01b03909116906379cc679090604401600060405180830381600087803b1580156106f657600080fd5b505af115801561070a573d6000803e3d6000fd5b505060975460985461072b93506001600160a01b039081169250168961145c565b6097546098546040516362d2f5ed60e11b81526001600160a01b039283169263c5a5ebda92349261076e92909116908c908c908c908c908c908c90600401611e3a565b60206040518083038185885af115801561078c573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906107b19190611e8c565b90506107bd6001606555565b9695505050505050565b6107cf611616565b609b8190556040518181527f876c61ade8d7fbb62356eefa0f1cb0d6d95fc5269dbe8d0d636051daa88d73999060200160405180910390a150565b6108126113db565b6098546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561085b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087f9190611dcf565b6097546040517fc3f511c10000000000000000000000000000000000000000000000000000000081529192506000916001600160a01b039091169063c3f511c1906108d09087908790600401611eb6565b6000604051808303816000875af11580156108ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109179190810190611fac565b6098546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109899190611dcf565b905060006109978483611dfe565b9050600081116109e95760405162461bcd60e51b815260206004820152601360248201527f4e6f2074425443207472616e736665727265640000000000000000000000000060448201526064016103dd565b6097546040517fea63738d000000000000000000000000000000000000000000000000000000008152600091610a8b916001600160a01b039091169063ea63738d90610a3990889060040161200d565b600060405180830381865afa158015610a56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7e919081019061203c565b60e0015161012e90612105565b90506001600160a01b038116610ae35760405162461bcd60e51b815260206004820152601860248201527f307830207265636569766572206e6f7420616c6c6f776564000000000000000060448201526064016103dd565b609b5482609c54610af4919061212c565b1115610b1657609854610b11906001600160a01b03168284611670565b610bad565b81609c6000828254610b28919061212c565b90915550506099546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260248201859052909116906340c10f1990604401600060405180830381600087803b158015610b9457600080fd5b505af1158015610ba8573d6000803e3d6000fd5b505050505b604080516001600160a01b0383168152602081018490527fc7f080a0d33152d54d5972f0bac2d7984089c4849e2af42bca1a572728d339d7910160405180910390a15050505050610bfe6001606555565b5050565b610c0a611616565b610c1460006116b9565b565b610c1e611616565b61ffff82166000818152609a6020908152604091829020849055815192835282018390527f1b29e2aa7a790fb04e7d6d73bf7ca63e2b4b1ffe0354fe94b4739c91f1a15359910160405180910390a15050565b600054610100900460ff1615808015610c915750600054600160ff909116105b80610cab5750303b158015610cab575060005460ff166001145b610d1d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103dd565b6000805460ff191660011790558015610d40576000805461ff0019166101001790555b610d48611718565b610d5061178b565b6001600160a01b038416610dcc5760405162461bcd60e51b815260206004820152602760248201527f576f726d686f6c65206272696467652061646472657373206d757374206e6f7460448201527f206265203078300000000000000000000000000000000000000000000000000060648201526084016103dd565b6001600160a01b038316610e2e5760405162461bcd60e51b8152602060048201526024808201527f42726964676520746f6b656e2061646472657373206d757374206e6f742062656044820152630203078360e41b60648201526084016103dd565b6001600160a01b038216610e905760405162461bcd60e51b8152602060048201526024808201527f4c325442544320746f6b656e2061646472657373206d757374206e6f742062656044820152630203078360e41b60648201526084016103dd565b609780546001600160a01b0380871673ffffffffffffffffffffffffffffffffffffffff1992831617909255609880548684169083161790556099805492851692909116919091179055600019609b558015610f26576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b610f34611616565b6001600160a01b038116610fb05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103dd565b610fb9816116b9565b50565b6000610fc66113db565b836110135760405162461bcd60e51b815260206004820152601960248201527f30783020726563697069656e74206e6f7420616c6c6f7765640000000000000060448201526064016103dd565b856000036110635760405162461bcd60e51b815260206004820152601460248201527f416d6f756e74206d757374206e6f74206265203000000000000000000000000060448201526064016103dd565b61106c86611434565b9550856000036110be5760405162461bcd60e51b815260206004820152601860248201527f416d6f756e7420746f6f206c6f7720746f20627269646765000000000000000060448201526064016103dd565b6098546040516370a0823160e01b815230600482015287916001600160a01b0316906370a0823190602401602060405180830381865afa158015611106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112a9190611dcf565b101561119e5760405162461bcd60e51b815260206004820152603160248201527f4e6f7420656e6f75676820776f726d686f6c65207442544320696e207468652060448201527f6761746577617920746f2062726964676500000000000000000000000000000060648201526084016103dd565b61ffff85166000818152609a60209081526040918290205482518a815291820193909352908101829052606081018690526080810185905263ffffffff841660a08201527ffcdb8efef11d13bb0ebc515477ece314fdac305aeba3d6d9d371838bbe2435cf9060c00160405180910390a186609c60008282546112219190611dfe565b909155505060995460405163079cc67960e41b8152336004820152602481018990526001600160a01b03909116906379cc679090604401600060405180830381600087803b15801561127257600080fd5b505af1158015611286573d6000803e3d6000fd5b50506097546098546112a793506001600160a01b039081169250168961145c565b8061136d576097546098546040517f0f5287b00000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018a905261ffff89166044820152606481018890526084810187905263ffffffff861660a4820152911690630f5287b090349060c4015b60206040518083038185885af1158015611340573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113659190611e8c565b9150506113c8565b6097546098546040805160208082018a905282518083039091018152818301928390526362d2f5ed60e11b9092526001600160a01b039384169363c5a5ebda9334936113229392909116918d918d9189918c9160440161213f565b6113d26001606555565b95945050505050565b60026065540361142d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103dd565b6002606555565b60006114456402540be4008361218f565b91506114566402540be400836121b1565b92915050565b8015806114ef57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156114c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ed9190611dcf565b155b6115615760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016103dd565b6040516001600160a01b03831660248201526044810182905261160a9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526117fe565b505050565b6001606555565b6033546001600160a01b03163314610c145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103dd565b6040516001600160a01b03831660248201526044810182905261160a9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016115a6565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166117835760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016103dd565b610c146118e3565b600054610100900460ff166117f65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016103dd565b610c14611957565b6000611853826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119c29092919063ffffffff16565b80519091501561160a578080602001905181019061187191906121c8565b61160a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103dd565b600054610100900460ff1661194e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016103dd565b610c14336116b9565b600054610100900460ff1661160f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016103dd565b60606119d184846000856119d9565b949350505050565b606082471015611a515760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103dd565b600080866001600160a01b03168587604051611a6d91906121ea565b60006040518083038185875af1925050503d8060008114611aaa576040519150601f19603f3d011682016040523d82523d6000602084013e611aaf565b606091505b5091509150611ac087838387611acb565b979650505050505050565b60608315611b3a578251600003611b33576001600160a01b0385163b611b335760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103dd565b50816119d1565b6119d18383815115611b4f5781518083602001fd5b8060405162461bcd60e51b81526004016103dd919061200d565b600060208284031215611b7b57600080fd5b5035919050565b61ffff81168114610fb957600080fd5b803563ffffffff81168114611ba657600080fd5b919050565b60008083601f840112611bbd57600080fd5b50813567ffffffffffffffff811115611bd557600080fd5b602083019150836020828501011115611bed57600080fd5b9250929050565b60008060008060008060a08789031215611c0d57600080fd5b863595506020870135611c1f81611b82565b945060408701359350611c3460608801611b92565b9250608087013567ffffffffffffffff811115611c5057600080fd5b611c5c89828a01611bab565b979a9699509497509295939492505050565b60008060208385031215611c8157600080fd5b823567ffffffffffffffff811115611c9857600080fd5b611ca485828601611bab565b90969095509350505050565b60008060408385031215611cc357600080fd5b8235611cce81611b82565b946020939093013593505050565b600060208284031215611cee57600080fd5b8135611cf981611b82565b9392505050565b6001600160a01b0381168114610fb957600080fd5b600080600060608486031215611d2a57600080fd5b8335611d3581611d00565b92506020840135611d4581611d00565b91506040840135611d5581611d00565b809150509250925092565b600060208284031215611d7257600080fd5b8135611cf981611d00565b600080600080600060a08688031215611d9557600080fd5b853594506020860135611da781611b82565b93506040860135925060608601359150611dc360808701611b92565b90509295509295909350565b600060208284031215611de157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561145657611456611de8565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038816815286602082015261ffff8616604082015284606082015263ffffffff8416608082015260c060a08201526000611e7f60c083018486611e11565b9998505050505050505050565b600060208284031215611e9e57600080fd5b815167ffffffffffffffff81168114611cf957600080fd5b6020815260006119d1602083018486611e11565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715611f0457611f04611eca565b60405290565b60005b83811015611f25578181015183820152602001611f0d565b50506000910152565b600082601f830112611f3f57600080fd5b815167ffffffffffffffff80821115611f5a57611f5a611eca565b604051601f8301601f19908116603f01168101908282118183101715611f8257611f82611eca565b81604052838152866020858801011115611f9b57600080fd5b6107bd846020830160208901611f0a565b600060208284031215611fbe57600080fd5b815167ffffffffffffffff811115611fd557600080fd5b6119d184828501611f2e565b60008151808452611ff9816020860160208601611f0a565b601f01601f19169290920160200192915050565b602081526000611cf96020830184611fe1565b805160ff81168114611ba657600080fd5b8051611ba681611b82565b60006020828403121561204e57600080fd5b815167ffffffffffffffff8082111561206657600080fd5b90830190610100828603121561207b57600080fd5b612083611ee0565b61208c83612020565b815260208301516020820152604083015160408201526120ae60608401612031565b6060820152608083015160808201526120c960a08401612031565b60a082015260c083015160c082015260e0830151828111156120ea57600080fd5b6120f687828601611f2e565b60e08301525095945050505050565b80516020808301519190811015612126576000198160200360031b1b821691505b50919050565b8082018082111561145657611456611de8565b6001600160a01b038716815285602082015261ffff8516604082015283606082015263ffffffff8316608082015260c060a0820152600061218360c0830184611fe1565b98975050505050505050565b6000826121ac57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761145657611456611de8565b6000602082840312156121da57600080fd5b81518015158114611cf957600080fd5b600082516121fc818460208701611f0a565b919091019291505056fea2646970667358221220a980e3ee7b8c177c2ea46ed6b994a7191861d6bc1954a8addf13602899b8632364736f6c63430008110033",
  "devdoc": {
    "details": "This contract is intended solely for testing purposes. As it currently      stands in the implementation of L2WormholeGateway.sol, there are no      reserved storage gap slots available, thereby limiting the upgradability      to a child contract only.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "fromWormholeAddress(bytes32)": {
        "params": {
          "_address": "The address to convert."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "receiveTbtc(bytes)": {
        "details": "Requirements:      - The receiver of Wormhole tBTC should be the L2WormholeGateway        contract.      - The receiver of the canonical tBTC should be abi-encoded in the        payload.      - The receiver of the canonical tBTC must not be the zero address.      The Wormhole Token Bridge contract has protection against redeeming      the same VAA again. When a Token Bridge VAA is redeemed, its      message body hash is stored in a map. This map is used to check      whether the hash has already been set in this map. For this reason,      this function does not have to be nonReentrant in theory. However,      to make this function non-dependent on Wormhole Bridge implementation,      we are making it nonReentrant anyway.",
        "params": {
          "encodedVm": "A byte array containing a Wormhole VAA signed by the        guardians."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sendTbtc(uint256,uint16,bytes32,uint256,uint32)": {
        "details": "Requirements:      - The sender must have at least `amount` of the canonical tBTC and        it has to be approved for L2WormholeGateway.      - The L2WormholeGateway must have at least `amount` of the wormhole        tBTC.      - The recipient must not be 0x0.      - The amount to transfer must not be 0,      - The amount to transfer must be >= 10^10 (1e18 precision).      Depending if Wormhole tBTC gateway is registered on the target      chain, this function uses transfer or transfer with payload over      the Wormhole bridge.",
        "params": {
          "amount": "The amount of tBTC to be sent.",
          "arbiterFee": "The Wormhole arbiter fee. Ignored if sending                   tBTC to chain with Wormhole tBTC gateway.",
          "nonce": "The Wormhole nonce used to batch messages together.",
          "recipient": "The address of the recipient in the Wormhole format.",
          "recipientChain": "The Wormhole recipient chain ID."
        },
        "returns": {
          "_0": "The Wormhole sequence number."
        }
      },
      "sendTbtcWithPayloadToNativeChain(uint256,uint16,bytes32,uint32,bytes)": {
        "details": "Requirements:      - The native chain doesn't have a Wormhole tBTC gateway, so the token        minted by Wormhole should be considered canonical.      - The sender must have at least `amount` of the canonical tBTC and        it has to be approved for L2WormholeGateway.      - The L2WormholeGateway must have at least `amount` of the wormhole        tBTC.      - The recipient must not be 0x0.      - The amount to transfer must not be 0,      - The amount to transfer must be >= 10^10 (1e18 precision).      This function uses `transferTokensWithPayload` to send tBTC directly      to the `recipient` contract address on the recipient chain. The `arbiterFee` is      not applicable and implicitly 0.",
        "params": {
          "amount": "The amount of tBTC to be sent.",
          "nonce": "The Wormhole nonce used to batch messages together.",
          "payload": "The arbitrary data to be passed to and processed by the `recipient`                contract on the recipient chain.",
          "recipient": "The Wormhole-formatted address of the target contract on the recipient chain                  that will receive the tokens and process the payload.",
          "recipientNativeChain": "The Wormhole chain ID of the recipient chain."
        },
        "returns": {
          "_0": "The Wormhole sequence number."
        }
      },
      "toWormholeAddress(address)": {
        "params": {
          "_address": "The address to convert."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateGatewayAddress(uint16,bytes32)": {
        "details": "Use toWormholeAddress function to convert between Ethereum and      Wormhole address formats.",
        "params": {
          "chainId": "Wormhole ID of the chain.",
          "gateway": "Address of tBTC gateway on the given chain in a Wormhole                format."
        }
      },
      "updateMintingLimit(uint256)": {
        "params": {
          "_mintingLimit": "The new minting limit."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bridge()": {
        "notice": "Reference to the Wormhole Token Bridge contract."
      },
      "bridgeToken()": {
        "notice": "Wormhole tBTC token representation."
      },
      "fromWormholeAddress(bytes32)": {
        "notice": "Converts Wormhole address into Ethereum format."
      },
      "gateways(uint16)": {
        "notice": "Maps Wormhole chain ID to the Wormhole tBTC gateway address on         that chain. For example, this chain's ID should be mapped to         this contract's address. If there is no Wormhole tBTC gateway         address on the given chain, there is no entry in this mapping.         The mapping holds addresses in a Wormhole-specific format, where         Ethereum address is left-padded with zeros."
      },
      "mintedAmount()": {
        "notice": "The amount of tBTC minted by this contract. tBTC burned by this         contract decreases this amount."
      },
      "mintingLimit()": {
        "notice": "Minting limit for this gateway. Useful for early days of testing         the system. The gateway can not mint more canonical tBTC than         this limit."
      },
      "receiveTbtc(bytes)": {
        "notice": "This function is called when the user redeems their token on L2.         The contract receives Wormhole tBTC representation and mints the         canonical tBTC for the user.         If the tBTC minting limit has been reached by this contract,         instead of minting tBTC the receiver address receives Wormhole         tBTC representation."
      },
      "sendTbtc(uint256,uint16,bytes32,uint256,uint32)": {
        "notice": "This function is called when the user sends their token from L2.         The contract burns the canonical tBTC from the user and sends         wormhole tBTC representation over the bridge.         Keep in mind that when multiple bridges receive a minting         authority on the canonical tBTC, this function may not be able         to send all amounts of tBTC through the Wormhole bridge. The         capability of Wormhole Bridge to send tBTC from the chain is         limited to the amount of tBTC bridged through Wormhole to that         chain."
      },
      "sendTbtcWithPayloadToNativeChain(uint256,uint16,bytes32,uint32,bytes)": {
        "notice": "This function is called when the user sends their token from L2.         The contract burns the canonical tBTC from the user and sends         wormhole tBTC representation over the bridge.         Keep in mind that when multiple bridges receive a minting         authority on the canonical tBTC, this function may not be able         to send all amounts of tBTC through the Wormhole bridge. The         capability of Wormhole Bridge to send tBTC from the chain is         limited to the amount of tBTC bridged through Wormhole to that         chain."
      },
      "tbtc()": {
        "notice": "Canonical tBTC token."
      },
      "toWormholeAddress(address)": {
        "notice": "Converts Ethereum address into Wormhole format."
      },
      "updateGatewayAddress(uint16,bytes32)": {
        "notice": "Lets the governance to update the tBTC gateway address on the         chain with the given Wormhole ID."
      },
      "updateMintingLimit(uint256)": {
        "notice": "Lets the governance to update the tBTC minting limit for this         contract."
      }
    },
    "notice": "Wormhole gateway for L2 Base - upgraded version.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5826,
        "contract": "contracts/wormhole/BaseWormholeGatewayUpgraded.sol:BaseWormholeGatewayUpgraded",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 5829,
        "contract": "contracts/wormhole/BaseWormholeGatewayUpgraded.sol:BaseWormholeGatewayUpgraded",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7916,
        "contract": "contracts/wormhole/BaseWormholeGatewayUpgraded.sol:BaseWormholeGatewayUpgraded",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5698,
        "contract": "contracts/wormhole/BaseWormholeGatewayUpgraded.sol:BaseWormholeGatewayUpgraded",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5818,
        "contract": "contracts/wormhole/BaseWormholeGatewayUpgraded.sol:BaseWormholeGatewayUpgraded",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6129,
        "contract": "contracts/wormhole/BaseWormholeGatewayUpgraded.sol:BaseWormholeGatewayUpgraded",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 6187,
        "contract": "contracts/wormhole/BaseWormholeGatewayUpgraded.sol:BaseWormholeGatewayUpgraded",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12852,
        "contract": "contracts/wormhole/BaseWormholeGatewayUpgraded.sol:BaseWormholeGatewayUpgraded",
        "label": "bridge",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IWormholeTokenBridge)12837"
      },
      {
        "astId": 12856,
        "contract": "contracts/wormhole/BaseWormholeGatewayUpgraded.sol:BaseWormholeGatewayUpgraded",
        "label": "bridgeToken",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IERC20Upgradeable)6878"
      },
      {
        "astId": 12860,
        "contract": "contracts/wormhole/BaseWormholeGatewayUpgraded.sol:BaseWormholeGatewayUpgraded",
        "label": "tbtc",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(L2TBTC)4999"
      },
      {
        "astId": 12865,
        "contract": "contracts/wormhole/BaseWormholeGatewayUpgraded.sol:BaseWormholeGatewayUpgraded",
        "label": "gateways",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint16,t_bytes32)"
      },
      {
        "astId": 12868,
        "contract": "contracts/wormhole/BaseWormholeGatewayUpgraded.sol:BaseWormholeGatewayUpgraded",
        "label": "mintingLimit",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 12871,
        "contract": "contracts/wormhole/BaseWormholeGatewayUpgraded.sol:BaseWormholeGatewayUpgraded",
        "label": "mintedAmount",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Upgradeable)6878": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IWormholeTokenBridge)12837": {
        "encoding": "inplace",
        "label": "contract IWormholeTokenBridge",
        "numberOfBytes": "20"
      },
      "t_contract(L2TBTC)4999": {
        "encoding": "inplace",
        "label": "contract L2TBTC",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint16,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}